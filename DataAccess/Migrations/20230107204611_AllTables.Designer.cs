// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(EnvueDbContext))]
    [Migration("20230107204611_AllTables")]
    partial class AllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("DataAccess.DataModels.Frame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RefX")
                        .HasColumnType("REAL");

                    b.Property<double>("RefY")
                        .HasColumnType("REAL");

                    b.Property<double>("RefZ")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("TubeX")
                        .HasColumnType("REAL");

                    b.Property<double>("TubeY")
                        .HasColumnType("REAL");

                    b.Property<double>("TubeZ")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Frames");
                });

            modelBuilder.Entity("DataAccess.DataModels.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DataAccess.DataModels.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("DataAccess.DataModels.Registration", b =>
                {
                    b.Property<int>("ProcedureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("RefX")
                        .HasColumnType("REAL");

                    b.Property<double>("RefY")
                        .HasColumnType("REAL");

                    b.Property<double>("RefZ")
                        .HasColumnType("REAL");

                    b.Property<double>("XiphoidX")
                        .HasColumnType("REAL");

                    b.Property<double>("XiphoidY")
                        .HasColumnType("REAL");

                    b.Property<double>("XiphoidZ")
                        .HasColumnType("REAL");

                    b.HasKey("ProcedureId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("DataAccess.DataModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.DataModels.UserPrivilege", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Privilege")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "Privilege");

                    b.ToTable("UserPrivileges");
                });

            modelBuilder.Entity("DataAccess.DataModels.Frame", b =>
                {
                    b.HasOne("DataAccess.DataModels.Procedure", "Procedure")
                        .WithMany("Frames")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("DataAccess.DataModels.Procedure", b =>
                {
                    b.HasOne("DataAccess.DataModels.Patient", "Patient")
                        .WithMany("Procedures")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.DataModels.User", "User")
                        .WithMany("Procedures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.DataModels.UserPrivilege", b =>
                {
                    b.HasOne("DataAccess.DataModels.User", null)
                        .WithMany("UserPrivileges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.DataModels.Patient", b =>
                {
                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("DataAccess.DataModels.Procedure", b =>
                {
                    b.Navigation("Frames");
                });

            modelBuilder.Entity("DataAccess.DataModels.User", b =>
                {
                    b.Navigation("Procedures");

                    b.Navigation("UserPrivileges");
                });
#pragma warning restore 612, 618
        }
    }
}
